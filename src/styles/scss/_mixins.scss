@mixin placeholder($color: #fff, $opacity: 1) {
  &::placeholder {
    color: $color;
    opacity: $opacity !important;
  }
}

@mixin respond-to($val, $query) {
  @media screen and ($val: $query) {
    @content;
  }
}

@mixin font-family($family: Lato) {
  font-family: $family, sans-serif;
}

@mixin first() {
  &:first-child {
    @content;
  }
}

@mixin last() {
  &:last-child {
    @content;
  }
}

@mixin not-first() {
  &:not(:first-child) {
    @content;
  }
}

@mixin not-last() {
  &:not(:last-child) {
    @content;
  }
}

@mixin space($prop, $val) {
  &-#{getDir($prop)} {
    &-#{str-replace($val + "", ".", "x")} {
      #{$prop}: #{$val}rem;

      &-t {
        #{$prop}-top: #{$val}rem;
      }

      &-b {
        #{$prop}-bottom: #{$val}rem;
      }

      &-l {
        #{$prop}-left: #{$val}rem;
      }

      &-r {
        #{$prop}-right: #{$val}rem;
      }

      &-v {
        #{$prop}-top:    #{$val}rem;
        #{$prop}-bottom: #{$val}rem;
      }

      &-h {
        #{$prop}-left:  #{$val}rem;
        #{$prop}-right: #{$val}rem;
      }
    }
  }
}

@mixin shadow($name, $color, $inset:null) {
  &-#{getDir($inset)} {
    &-#{$name} {
      box-shadow: #{getTopShadow($inset, $color)},
                  #{getBottomShadow($inset, $color)},
                  #{getLeftShadow($inset, $color)},
                  #{getRightShadow($inset, $color)};

      &-t {
        box-shadow: #{getTopShadow($inset, $color)};
      }

      &-b {
        box-shadow: #{getBottomShadow($inset, $color)};
      }

      &-l {
        box-shadow: #{getLeftShadow($inset, $color)};
      }

      &-r {
        box-shadow: #{getRightShadow($inset, $color)};
      }

      &-v {
        box-shadow: #{getTopShadow($inset, $color)},
                    #{getBottomShadow($inset, $color)};
      }

      &-h {
        box-shadow: #{getLeftShadow($inset, $color)},
                    #{getRightShadow($inset, $color)};
      }
    }
  }
}

@mixin width($min, $max, $step: 0.5) {
  $val: $min;
  @while $val <= $max {
    &-#{str-replace($val + "", ".", "x")} {
      width: #{$val}rem;
    }
    $val: $val + $step;
  }
}

@mixin position($prop) {
  position: $prop;

  &-t {
    top: 0;
    position: $prop;

    &-l {
      left: 0;
      top: 0;
      position: $prop;
    }

    &-r {
      right: 0;
      top: 0;
      position: $prop;
    }
  }

  &-b {
    bottom: 0;
    position: $prop;

    &-l {
      left: 0;
      bottom: 0;
      position: $prop;
    }

    &-r {
      right: 0;
      bottom: 0;
      position: $prop;
    }
  }

  &-l {
    left: 0;
    position: $prop;
  }

  &-r {
    right: 0;
    position: $prop;
  }
}

@mixin transition($prop) {
  &-#{$prop} {
    transition: $prop $transition-duration $transition-function;
  }
}

%transition-common {
  transition: all $transition-duration $transition-function;
}

// Requires `{position: relative}` on parent.
@mixin center-abs() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateY(-50%) translateX(-50%);
}

// Requires `{position: relative}` on parent.
@mixin fit-abs($position: absolute) {
  position: $position;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// Requires `{position: relative}` on parent.
@mixin fit-fixed() {
  @include fit-abs(fixed);
}
